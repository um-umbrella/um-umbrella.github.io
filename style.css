/*やるぞ～*/
/* カスタムプロパティ */
:root {
  --main-color: #481;
  --most-white: #fff; /*メインの土台*/
  --most-black: #000;
  --high-gray: #ccc; /*背景*/
  --low-gray: #298; /*枠など*/
  --font-size: 14px;
  line-height: 1.3em;
}

body {
  font-size: 14px;
  padding: 1em;
  background-color: var(--high-gray);
}
/*h1 {
  color: var(--most-white);
  background-color: var(--main-color);
  padding-left: 0.3em;
  margin: 0;
}
*/

h1,
h2 {
  display: inline;
  width: 200px;
  position: relative;
  translate: -0.5em 1em;
  padding: 0.5em 0.7em;
  z-index: 1;
  border: 2px solid var(--most-black);
  box-shadow: 5px 5px var(--most-black);
  background-color: var(--most-white);
  color: var(--most-black);
}

h2::before {
  content: '！';
  color: var(--most-white);
  background-color: var(--main-color);
  padding: 0 0.2em;
  margin-right: 0.3em;
  border-radius: 50em;
}

h3 {
  display: inline-block;
  position: relative;
  translate: -0.5em 1em;
  padding: 0.5em 0.7em;
  z-index: 1;
  border: 2px solid var(--most-black);
  box-shadow: 5px 5px var(--most-black);
  background-color: var(--most-white);
  color: var(--most-black);
}

a:any-link {
  text-decoration: none;
  color: var(--most-white);
  background-color: var(--main-color);
  border-radius: 0.2em;
  border-top-left-radius: 1em;
  border-bottom-left-radius: 1em;
  padding: 0.1em 0.5em;
  padding-left: 1.5em;

  position: relative;
}

a::before {
  position: absolute;
  left: 0.5em;
  bottom: 0.6em;
  width: 0.5em;
  height: 0.5em;
  content: '';
  border-radius: 50%;
  background: var(--most-white);
}

div {
  max-width: 600px;
  min-width: 300px;
}

p {
  list-style-type: disc;
  list-style-position: inside;
  border: solid 2px var(--low-gray);
  background-color: var(--most-white);
  margin: 1.5em 0 3em;
  padding: 1em;
  font-size: var(--font-size);
}

/*メモリス*/
#memo ol {
  transform: rotate(-1deg); /*傾き*/
  list-style-type: disc;
  list-style-position: inside;
  position: relative;
  bottom: 1em;
  padding: 2em;
  margin: 0;
  border: solid 2px var(--low-gray);
  background-color: var(--most-white);
  font-size: 12px;
}
#memo li {
  padding: 0.1em;
}
#memo li:not(last-child) {
  border-bottom: dashed 1px #ccc;
}
#memo li::marker {
  color: var(--main-color);
  font-size: 1.3em;
}

#works,
#data,
#do_it,
#dont_it,
#no_touch {
  transform: rotate(0.5deg); /*傾き*/
  list-style-type: disc;
  list-style-position: inside;
  border: solid 2px var(--low-gray);
  font-size: 14px;
  background-color: var(--most-white);
  padding: 1em 0;
  font-size: var(--font-size);
}

#data dd,
#do_it dd,
#dont_it dd,
#no_touch dd {
  padding: 0.7em 0;
  border-bottom: dashed 1px #ccc;
}
dl {
}

dl dt {
  font-weight: 600;
  margin: 0.3em 2em;
}
dl dd {
  margin: 0 3em;
}

/*
#memo li::marker {
  content: '？';
  color: #ccc;
  background-color: #a33;
  border-radius: 1em;
  font-size: 3em;
}
  */

/* idを指定する時は＃ 
#fisrt {
}

/* クラスを指定する時は. 
.A {
}

/* 同じクラス名を持つうちの特定の要素だけ指定 
  この場合、「p要素のクラス名だけ」を指定（h要素のクラス名は含まれない）
p.クラス名 {
}

/*   複数のinput要素のうち、type属性を持つものだけに適用 
  特定属性を指定するなら[type="属性名"]と書く
input[type] {
  background-color: aquamarine;
}

label:focus-within {
  background-color: #a33;
}

/* 複数セレクターに同じCSSを適用 
h2,h3 {
  background-color: #a33;
}
  */

/*
  特定要素の子孫要素を選択：半角スペース
  子孫要素だけを選択する：  ＞  上記で睡蓮花現象になるときはこっちを使う 
  兄弟関係を選択するとき：  ~   要素A自体は含まれない。途中に別タグが挟まっても途切れないし、指定自体は兄弟要素でなくともいい
  直後の兄弟要素だけを指定：+   要素Aの直後だけ適用される
  以上は組み合わせもできる
 */

/*   疑似要素（要素の一部を選ぶ）セレクタ::キーワード　キーワードは既存のやつ… 
    疑似クラス（一部の要素を選ぶ）セレクタ:キーワード */

::selection {
  /*   選択したテキストに適用 */
  color: #eee;
  background-color: #aaa;
}
